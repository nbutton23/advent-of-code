package seven

import (
	"fmt"
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_BreakUpOpCode(t *testing.T) {
	testCases := []struct {
		ints       int
		op         int
		p1, p2, p3 bool
	}{
		{
			23,
			23,
			false,
			false,
			false,
		},
		{
			1002,
			2,
			false,
			true,
			false,
		},
		{
			102,
			2,
			true,
			false,
			false,
		},
		{
			10002,
			2,
			false,
			false,
			true,
		},
		{
			11102,
			2,
			true,
			true,
			true,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			c := BreakUpOpCode(tc.ints)
			assert.Equal(t, tc.op, c.Code)
			assert.Equal(t, tc.p1, c.P1Immediate)
			assert.Equal(t, tc.p2, c.P2Immediate)
			assert.Equal(t, tc.p3, c.P3Immediate)
		})
	}
}

func Test_IntCode(t *testing.T) {
	testCases := []struct {
		program []int
		input   int
		expOut  int
	}{
		{
			[]int{1, 0, 0, 0, 4, 0, 99},
			0,
			2,
		},
		{
			[]int{2, 3, 0, 3, 4, 3, 99},
			0,
			6,
		},
		{
			[]int{2, 6, 6, 7, 4, 7, 99, 0},
			0,
			9801,
		},
		{
			[]int{1, 1, 1, 4, 99, 5, 6, 0, 4, 0, 99},
			0,
			30,
		},
		// Using position mode, consider whether the input is equal to 8;
		// output 1 (if it is) or 0 (if it is not).
		{
			[]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8},
			8,
			1,
		},
		{
			[]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8},
			10,
			0,
		},
		{

			[]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8},
			2,
			0,
		},
		// Using position mode, consider whether the input is less than 8;
		// output 1 (if it is) or 0 (if it is not).
		{
			[]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8},
			8,
			0,
		},
		{
			[]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8},
			10,
			0,
		},
		{
			[]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8},
			7,
			1,
		},
		// Using immediate mode, consider whether the input is equal to 8;
		// output 1 (if it is) or 0 (if it is not).
		{

			[]int{3, 3, 1108, -1, 8, 3, 4, 3, 99},
			8,
			1,
		},
		{
			[]int{3, 3, 1108, -1, 8, 3, 4, 3, 99},
			9,
			0,
		},
		{
			[]int{3, 3, 1108, -1, 8, 3, 4, 3, 99},
			7,
			0,
		},

		// Using immediate mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
		{

			[]int{3, 3, 1107, -1, 8, 3, 4, 3, 99},
			8,
			0,
		},
		{

			[]int{3, 3, 1107, -1, 8, 3, 4, 3, 99},
			9,
			0,
		},
		{

			[]int{3, 3, 1107, -1, 8, 3, 4, 3, 99},
			7,
			1,
		},

		// take an input, then output 0 if the input was zero or 1 if the input was non-zero using position mode
		{
			[]int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9},
			0,
			0,
		},
		{
			[]int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9},
			1,
			1,
		},
		{
			[]int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9},
			2,
			1,
		},

		// take an input, then output 0 if the input was zero or 1 if the input was non-zero using immediate mode
		{
			[]int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1},
			0,
			0,
		},
		{
			[]int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1},
			1,
			1,
		},
		{
			[]int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1},
			2,
			1,
		},

		// output 999 if the input value is below 8, output 1000 if the
		// input value is equal to 8,or output 1001 if the input value is greater than 8.
		{
			[]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
				1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
				999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
			7,
			999,
		},
		{
			[]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
				1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
				999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
			8,
			1000,
		},
		{
			[]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
				1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
				999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
			9,
			1001,
		},
		{
			// Question
			[]int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 67, 166, 224, 1001, 224, -110, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 2, 62, 66, 224, 101, -406, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1101, 76, 51, 225, 1101, 51, 29, 225, 1102, 57, 14, 225, 1102, 64, 48, 224, 1001, 224, -3072, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1001, 217, 90, 224, 1001, 224, -101, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1101, 57, 55, 224, 1001, 224, -112, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 7, 224, 1, 223, 224, 223, 1102, 5, 62, 225, 1102, 49, 68, 225, 102, 40, 140, 224, 101, -2720, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1101, 92, 43, 225, 1101, 93, 21, 225, 1002, 170, 31, 224, 101, -651, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1, 136, 57, 224, 1001, 224, -138, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 223, 224, 223, 1102, 11, 85, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 449, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 554, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1008, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 629, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
			5,
			5893654,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			content := []byte(fmt.Sprintf("%d", tc.input))
			tmpfile, err := ioutil.TempFile("temp", "test")
			require.NoError(t, err)

			defer os.Remove(tmpfile.Name()) // clean up

			if _, err := tmpfile.Write(content); err != nil {
				require.NoError(t, err)
			}

			if _, err := tmpfile.Seek(0, 0); err != nil {
				require.NoError(t, err)
			}

			oldStdin := os.Stdin
			defer func() { os.Stdin = oldStdin }() // Restore original Stdin

			os.Stdin = tmpfile

			pass := false
			oStream := func(a ...interface{}) (n int, err error) {
				pass = assert.Equal(t, tc.expOut, a[0])
				return 0, nil
			}

			p := NewP(nil, oStream)
			p.ProcessProgram(0, tc.program)

			assert.True(t, pass)
			if err := tmpfile.Close(); err != nil {
				require.NoError(t, err)
			}
		})
	}
}

func Test_ProcessAmp(t *testing.T) {
	testCases := []struct {
		p        []int
		phase    []int
		expected int
	}{
		{
			p:        []int{3, 15, 3, 16, 1002, 16, 10, 16, 1, 16, 15, 15, 4, 15, 99, 0, 0},
			phase:    []int{4, 3, 2, 1, 0},
			expected: 43210,
		},
		{
			p:        []int{3, 23, 3, 24, 1002, 24, 10, 24, 1002, 23, -1, 23, 101, 5, 23, 23, 1, 24, 23, 23, 4, 23, 99, 0, 0},
			phase:    []int{0, 1, 2, 3, 4},
			expected: 54321,
		},
		{
			p:        []int{3, 31, 3, 32, 1002, 32, 10, 32, 1001, 31, -2, 31, 1007, 31, 0, 33, 1002, 33, 7, 33, 1, 33, 31, 31, 1, 32, 31, 31, 4, 31, 99, 0, 0, 0},
			phase:    []int{1, 0, 4, 3, 2},
			expected: 65210,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			o, err := ProcessAmps(tc.p, tc.phase, 0)

			assert.NoError(t, err)
			assert.Equal(t, tc.expected, o)
		})
	}
}

func Test_ProcessAmpLoop(t *testing.T) {
	testCases := []struct {
		p        []int
		phase    []int
		expected int
	}{
		// {
		// 	p:        []int{3, 26, 1001, 26, -4, 26, 3, 27, 1002, 27, 2, 27, 1, 27, 26, 27, 4, 27, 1001, 28, -1, 28, 1005, 28, 6, 99, 0, 0, 5},
		// 	phase:    []int{9, 8, 7, 6, 5},
		// 	expected: 139629729,
		// },
		// {
		// 	p:        []int{3, 52, 1001, 52, -5, 52, 3, 53, 1, 52, 56, 54, 1007, 54, 5, 55, 1005, 55, 26, 1001, 54, -5, 54, 1105, 1, 12, 1, 53, 54, 53, 1008, 54, 0, 55, 1001, 55, 1, 55, 2, 53, 55, 53, 4, 53, 1001, 56, -1, 56, 1005, 56, 6, 99, 0, 0, 0, 0, 10},
		// 	phase:    []int{9, 7, 8, 5, 6},
		// 	expected: 18216,
		// },
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			o := ProcessAmpLoop(tc.p, tc.phase, 0)
			assert.Equal(t, tc.expected, o)
		})
	}
}

func Test_MaxAmp(t *testing.T) {
	testCases := []struct {
		p        []int
		minPhase int
		maxPhase int
		expected int
	}{
		{
			p:        []int{3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 59, 84, 93, 110, 191, 272, 353, 434, 99999, 3, 9, 101, 5, 9, 9, 1002, 9, 5, 9, 101, 5, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 3, 9, 1002, 9, 2, 9, 101, 4, 9, 9, 1002, 9, 4, 9, 4, 9, 99, 3, 9, 102, 5, 9, 9, 1001, 9, 4, 9, 1002, 9, 2, 9, 1001, 9, 5, 9, 102, 4, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 1002, 9, 5, 9, 101, 4, 9, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99},
			minPhase: 0,
			maxPhase: 4,
			expected: 225056,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			o, err := MaxAmp(tc.p, tc.minPhase, tc.maxPhase)
			assert.NoError(t, err)
			assert.Equal(t, tc.expected, o)
		})
	}
}

func Test_MaxAmpLoop(t *testing.T) {
	testCases := []struct {
		p        []int
		minPhase int
		maxPhase int
		expected int
	}{
		{
			p:        []int{3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 59, 84, 93, 110, 191, 272, 353, 434, 99999, 3, 9, 101, 5, 9, 9, 1002, 9, 5, 9, 101, 5, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 3, 9, 1002, 9, 2, 9, 101, 4, 9, 9, 1002, 9, 4, 9, 4, 9, 99, 3, 9, 102, 5, 9, 9, 1001, 9, 4, 9, 1002, 9, 2, 9, 1001, 9, 5, 9, 102, 4, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 1002, 9, 5, 9, 101, 4, 9, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99},
			minPhase: 5,
			maxPhase: 9,
			expected: 14260332,
		},
	}
	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			o := MaxAmpLoop(tc.p, tc.minPhase, tc.maxPhase)
			assert.Equal(t, tc.expected, o)
		})
	}
}
func Test_permutations(t *testing.T) {
	testCases := []struct {
		n      []int
		lenght int
	}{
		{
			n:      []int{1},
			lenght: 1,
		},
		{
			n:      []int{1, 2},
			lenght: 2,
		},
		{
			n:      []int{1, 2, 3},
			lenght: 6,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			p := permutations(tc.n)
			assert.Len(t, p, tc.lenght)
		})
	}
}
