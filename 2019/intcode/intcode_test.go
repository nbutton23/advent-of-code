package intcode

import (
	"strconv"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_BreakUpOpCode(t *testing.T) {
	testCases := []struct {
		ints       int
		op         int
		p1, p2, p3 accessMode
	}{
		{
			23,
			23,
			positionMode,
			positionMode,
			positionMode,
		},
		{
			1002,
			2,
			positionMode,
			immediateMode,
			positionMode,
		},
		{
			102,
			2,
			immediateMode,
			positionMode,
			positionMode,
		},
		{
			10002,
			2,
			positionMode,
			positionMode,
			immediateMode,
		},
		{
			11102,
			2,
			immediateMode,
			immediateMode,
			immediateMode,
		},
		{
			11202,
			2,
			relativeMode,
			immediateMode,
			immediateMode,
		},
		{
			12102,
			2,
			immediateMode,
			relativeMode,
			immediateMode,
		},
		{
			21102,
			2,
			immediateMode,
			immediateMode,
			relativeMode,
		},
		{
			22202,
			2,
			relativeMode,
			relativeMode,
			relativeMode,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			c := BreakUpOpCode(tc.ints)
			assert.Equal(t, tc.op, c.Code)
			assert.Equal(t, tc.p1, c.P1Mode)
			assert.Equal(t, tc.p2, c.P2Mode)
			assert.Equal(t, tc.p3, c.P3Mode)
		})
	}
}

func Test_IntCode(t *testing.T) {
	testCases := []struct {
		program []int
		input   int
		expOut  int
	}{
		{
			[]int{1, 0, 0, 0, 4, 0, 99},
			0,
			2,
		},
		{
			[]int{2, 3, 0, 3, 4, 3, 99},
			0,
			6,
		},
		{
			[]int{2, 6, 6, 7, 4, 7, 99, 0},
			0,
			9801,
		},
		{
			[]int{1, 1, 1, 4, 99, 5, 6, 0, 4, 0, 99},
			0,
			30,
		},
		// Using position mode, consider whether the input is equal to 8;
		// output 1 (if it is) or 0 (if it is not). 
		// (Day 5)
		{
			[]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8},
			8,
			1,
		},
		{
			[]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8},
			10,
			0,
		},
		{

			[]int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8},
			2,
			0,
		},
		// Using position mode, consider whether the input is less than 8;
		// output 1 (if it is) or 0 (if it is not). 
		// (Day 5)
		{
			[]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8},
			8,
			0,
		},
		{
			[]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8},
			10,
			0,
		},
		{
			[]int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8},
			7,
			1,
		},
		// Using immediate mode, consider whether the input is equal to 8;
		// output 1 (if it is) or 0 (if it is not). 
		// (Day 5)
		{

			[]int{3, 3, 1108, -1, 8, 3, 4, 3, 99},
			8,
			1,
		},
		{
			[]int{3, 3, 1108, -1, 8, 3, 4, 3, 99},
			9,
			0,
		},
		{
			[]int{3, 3, 1108, -1, 8, 3, 4, 3, 99},
			7,
			0,
		},

		// Using immediate mode, consider whether the input is less than 8;
		// output 1 (if it is) or 0 (if it is not). 
		// (Day 5)
		{

			[]int{3, 3, 1107, -1, 8, 3, 4, 3, 99},
			8,
			0,
		},
		{

			[]int{3, 3, 1107, -1, 8, 3, 4, 3, 99},
			9,
			0,
		},
		{

			[]int{3, 3, 1107, -1, 8, 3, 4, 3, 99},
			7,
			1,
		},

		// take an input, then output 0 if the input was zero or 1 
		// if the input was non-zero using position mode 
		// (Day 5)
		{
			[]int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9},
			0,
			0,
		},
		{
			[]int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9},
			1,
			1,
		},
		{
			[]int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9},
			2,
			1,
		},

		// take an input, then output 0 if the input was zero or 1
		//  if the input was non-zero using immediate mode
		// (Day 5)
		{
			[]int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1},
			0,
			0,
		},
		{
			[]int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1},
			1,
			1,
		},
		{
			[]int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1},
			2,
			1,
		},

		// output 999 if the input value is below 8, output 1000 if the
		// input value is equal to 8,or output 1001 if the input value is greater than 8.
		// (Day 5)
		{
			[]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
				1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
				999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
			7,
			999,
		},
		{
			[]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
				1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
				999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
			8,
			1000,
		},
		{
			[]int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
				1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
				999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
			9,
			1001,
		},
		// {
		// 	// Question day 5.1
		// 	[]int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 67, 166, 224, 1001, 224, -110, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 2, 62, 66, 224, 101, -406, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1101, 76, 51, 225, 1101, 51, 29, 225, 1102, 57, 14, 225, 1102, 64, 48, 224, 1001, 224, -3072, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1001, 217, 90, 224, 1001, 224, -101, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1101, 57, 55, 224, 1001, 224, -112, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 7, 224, 1, 223, 224, 223, 1102, 5, 62, 225, 1102, 49, 68, 225, 102, 40, 140, 224, 101, -2720, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1101, 92, 43, 225, 1101, 93, 21, 225, 1002, 170, 31, 224, 101, -651, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1, 136, 57, 224, 1001, 224, -138, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 223, 224, 223, 1102, 11, 85, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 449, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 554, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1008, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 629, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
		// 	1,
		// 	9219874,
		// },
		{
			// Question day 5.2
			[]int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 67, 166, 224, 1001, 224, -110, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 2, 62, 66, 224, 101, -406, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1101, 76, 51, 225, 1101, 51, 29, 225, 1102, 57, 14, 225, 1102, 64, 48, 224, 1001, 224, -3072, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1001, 217, 90, 224, 1001, 224, -101, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1101, 57, 55, 224, 1001, 224, -112, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 7, 224, 1, 223, 224, 223, 1102, 5, 62, 225, 1102, 49, 68, 225, 102, 40, 140, 224, 101, -2720, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1101, 92, 43, 225, 1101, 93, 21, 225, 1002, 170, 31, 224, 101, -651, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1, 136, 57, 224, 1001, 224, -138, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 223, 224, 223, 1102, 11, 85, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 449, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 554, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1008, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 629, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
			5,
			5893654,
		},

		{
			// output a 16-digit number. uses more memory than inited
			[]int{1102, 34915192, 34915192, 7, 4, 7, 99, 0},
			0, //No input
			1219070632396864,
		},
		{
			// output the large number in the middle. uses more memory than inited
			[]int{104, 1125899906842624, 99},
			0, //No input
			1125899906842624,
		},
		{
			// Day9.1 Boost in test mode
			[]int{1102, 34463338, 34463338, 63, 1007, 63, 34463338, 63, 1005, 63, 53, 1102, 3, 1, 1000, 109, 988, 209, 12, 9, 1000, 209, 6, 209, 3, 203, 0, 1008, 1000, 1, 63, 1005, 63, 65, 1008, 1000, 2, 63, 1005, 63, 904, 1008, 1000, 0, 63, 1005, 63, 58, 4, 25, 104, 0, 99, 4, 0, 104, 0, 99, 4, 17, 104, 0, 99, 0, 0, 1102, 521, 1, 1028, 1101, 0, 36, 1000, 1102, 30, 1, 1005, 1101, 21, 0, 1013, 1101, 26, 0, 1006, 1102, 31, 1, 1017, 1101, 24, 0, 1007, 1101, 0, 1, 1021, 1102, 27, 1, 1019, 1101, 23, 0, 1010, 1101, 0, 38, 1012, 1102, 35, 1, 1001, 1101, 25, 0, 1003, 1102, 20, 1, 1004, 1101, 0, 37, 1009, 1101, 424, 0, 1023, 1102, 39, 1, 1008, 1102, 406, 1, 1027, 1102, 1, 413, 1026, 1101, 0, 29, 1002, 1102, 1, 0, 1020, 1102, 34, 1, 1014, 1102, 1, 28, 1018, 1102, 1, 33, 1011, 1102, 300, 1, 1025, 1102, 1, 22, 1015, 1102, 305, 1, 1024, 1101, 32, 0, 1016, 1102, 427, 1, 1022, 1101, 512, 0, 1029, 109, 14, 1205, 6, 197, 1001, 64, 1, 64, 1106, 0, 199, 4, 187, 1002, 64, 2, 64, 109, -18, 1207, 8, 19, 63, 1005, 63, 215, 1105, 1, 221, 4, 205, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 10, 1208, -1, 28, 63, 1005, 63, 237, 1106, 0, 243, 4, 227, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -2, 2102, 1, 0, 63, 1008, 63, 22, 63, 1005, 63, 263, 1105, 1, 269, 4, 249, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 11, 21107, 40, 39, 0, 1005, 1015, 289, 1001, 64, 1, 64, 1106, 0, 291, 4, 275, 1002, 64, 2, 64, 109, 9, 2105, 1, 0, 4, 297, 1105, 1, 309, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -13, 2101, 0, -5, 63, 1008, 63, 25, 63, 1005, 63, 329, 1105, 1, 335, 4, 315, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 1, 1206, 8, 353, 4, 341, 1001, 64, 1, 64, 1105, 1, 353, 1002, 64, 2, 64, 109, 3, 2108, 37, -6, 63, 1005, 63, 375, 4, 359, 1001, 64, 1, 64, 1106, 0, 375, 1002, 64, 2, 64, 109, -16, 1207, 2, 36, 63, 1005, 63, 397, 4, 381, 1001, 64, 1, 64, 1105, 1, 397, 1002, 64, 2, 64, 109, 28, 2106, 0, 0, 1001, 64, 1, 64, 1106, 0, 415, 4, 403, 1002, 64, 2, 64, 109, -3, 2105, 1, -1, 1106, 0, 433, 4, 421, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -12, 2108, 25, -6, 63, 1005, 63, 449, 1105, 1, 455, 4, 439, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -19, 1202, 8, 1, 63, 1008, 63, 38, 63, 1005, 63, 479, 1001, 64, 1, 64, 1105, 1, 481, 4, 461, 1002, 64, 2, 64, 109, 14, 2107, 25, 0, 63, 1005, 63, 497, 1105, 1, 503, 4, 487, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 24, 2106, 0, -3, 4, 509, 1001, 64, 1, 64, 1105, 1, 521, 1002, 64, 2, 64, 109, -20, 1208, -2, 37, 63, 1005, 63, 543, 4, 527, 1001, 64, 1, 64, 1106, 0, 543, 1002, 64, 2, 64, 109, 7, 21102, 41, 1, 0, 1008, 1018, 43, 63, 1005, 63, 563, 1105, 1, 569, 4, 549, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -7, 1205, 10, 587, 4, 575, 1001, 64, 1, 64, 1106, 0, 587, 1002, 64, 2, 64, 109, -11, 1202, 5, 1, 63, 1008, 63, 30, 63, 1005, 63, 609, 4, 593, 1106, 0, 613, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 4, 1201, 5, 0, 63, 1008, 63, 34, 63, 1005, 63, 637, 1001, 64, 1, 64, 1105, 1, 639, 4, 619, 1002, 64, 2, 64, 109, 12, 1206, 5, 651, 1105, 1, 657, 4, 645, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 9, 21101, 42, 0, -7, 1008, 1018, 39, 63, 1005, 63, 677, 1105, 1, 683, 4, 663, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -2, 21101, 43, 0, -8, 1008, 1015, 43, 63, 1005, 63, 705, 4, 689, 1106, 0, 709, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -25, 2107, 38, 10, 63, 1005, 63, 727, 4, 715, 1106, 0, 731, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 7, 2102, 1, 2, 63, 1008, 63, 24, 63, 1005, 63, 757, 4, 737, 1001, 64, 1, 64, 1105, 1, 757, 1002, 64, 2, 64, 109, -13, 1201, 10, 0, 63, 1008, 63, 29, 63, 1005, 63, 779, 4, 763, 1105, 1, 783, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 30, 21108, 44, 41, -3, 1005, 1019, 803, 1001, 64, 1, 64, 1106, 0, 805, 4, 789, 1002, 64, 2, 64, 109, -2, 21102, 45, 1, -7, 1008, 1013, 45, 63, 1005, 63, 827, 4, 811, 1105, 1, 831, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -16, 21107, 46, 47, 7, 1005, 1011, 849, 4, 837, 1106, 0, 853, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 9, 21108, 47, 47, 0, 1005, 1013, 875, 4, 859, 1001, 64, 1, 64, 1106, 0, 875, 1002, 64, 2, 64, 109, -10, 2101, 0, 2, 63, 1008, 63, 30, 63, 1005, 63, 901, 4, 881, 1001, 64, 1, 64, 1105, 1, 901, 4, 64, 99, 21102, 1, 27, 1, 21102, 1, 915, 0, 1106, 0, 922, 21201, 1, 51805, 1, 204, 1, 99, 109, 3, 1207, -2, 3, 63, 1005, 63, 964, 21201, -2, -1, 1, 21101, 942, 0, 0, 1106, 0, 922, 22101, 0, 1, -1, 21201, -2, -3, 1, 21101, 0, 957, 0, 1105, 1, 922, 22201, 1, -1, -2, 1105, 1, 968, 21201, -2, 0, -2, 109, -3, 2105, 1, 0},
			1,
			2351176124,
		},
		{
			// Day9.2 Boost
			[]int{1102, 34463338, 34463338, 63, 1007, 63, 34463338, 63, 1005, 63, 53, 1102, 3, 1, 1000, 109, 988, 209, 12, 9, 1000, 209, 6, 209, 3, 203, 0, 1008, 1000, 1, 63, 1005, 63, 65, 1008, 1000, 2, 63, 1005, 63, 904, 1008, 1000, 0, 63, 1005, 63, 58, 4, 25, 104, 0, 99, 4, 0, 104, 0, 99, 4, 17, 104, 0, 99, 0, 0, 1102, 521, 1, 1028, 1101, 0, 36, 1000, 1102, 30, 1, 1005, 1101, 21, 0, 1013, 1101, 26, 0, 1006, 1102, 31, 1, 1017, 1101, 24, 0, 1007, 1101, 0, 1, 1021, 1102, 27, 1, 1019, 1101, 23, 0, 1010, 1101, 0, 38, 1012, 1102, 35, 1, 1001, 1101, 25, 0, 1003, 1102, 20, 1, 1004, 1101, 0, 37, 1009, 1101, 424, 0, 1023, 1102, 39, 1, 1008, 1102, 406, 1, 1027, 1102, 1, 413, 1026, 1101, 0, 29, 1002, 1102, 1, 0, 1020, 1102, 34, 1, 1014, 1102, 1, 28, 1018, 1102, 1, 33, 1011, 1102, 300, 1, 1025, 1102, 1, 22, 1015, 1102, 305, 1, 1024, 1101, 32, 0, 1016, 1102, 427, 1, 1022, 1101, 512, 0, 1029, 109, 14, 1205, 6, 197, 1001, 64, 1, 64, 1106, 0, 199, 4, 187, 1002, 64, 2, 64, 109, -18, 1207, 8, 19, 63, 1005, 63, 215, 1105, 1, 221, 4, 205, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 10, 1208, -1, 28, 63, 1005, 63, 237, 1106, 0, 243, 4, 227, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -2, 2102, 1, 0, 63, 1008, 63, 22, 63, 1005, 63, 263, 1105, 1, 269, 4, 249, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 11, 21107, 40, 39, 0, 1005, 1015, 289, 1001, 64, 1, 64, 1106, 0, 291, 4, 275, 1002, 64, 2, 64, 109, 9, 2105, 1, 0, 4, 297, 1105, 1, 309, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -13, 2101, 0, -5, 63, 1008, 63, 25, 63, 1005, 63, 329, 1105, 1, 335, 4, 315, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 1, 1206, 8, 353, 4, 341, 1001, 64, 1, 64, 1105, 1, 353, 1002, 64, 2, 64, 109, 3, 2108, 37, -6, 63, 1005, 63, 375, 4, 359, 1001, 64, 1, 64, 1106, 0, 375, 1002, 64, 2, 64, 109, -16, 1207, 2, 36, 63, 1005, 63, 397, 4, 381, 1001, 64, 1, 64, 1105, 1, 397, 1002, 64, 2, 64, 109, 28, 2106, 0, 0, 1001, 64, 1, 64, 1106, 0, 415, 4, 403, 1002, 64, 2, 64, 109, -3, 2105, 1, -1, 1106, 0, 433, 4, 421, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -12, 2108, 25, -6, 63, 1005, 63, 449, 1105, 1, 455, 4, 439, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -19, 1202, 8, 1, 63, 1008, 63, 38, 63, 1005, 63, 479, 1001, 64, 1, 64, 1105, 1, 481, 4, 461, 1002, 64, 2, 64, 109, 14, 2107, 25, 0, 63, 1005, 63, 497, 1105, 1, 503, 4, 487, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 24, 2106, 0, -3, 4, 509, 1001, 64, 1, 64, 1105, 1, 521, 1002, 64, 2, 64, 109, -20, 1208, -2, 37, 63, 1005, 63, 543, 4, 527, 1001, 64, 1, 64, 1106, 0, 543, 1002, 64, 2, 64, 109, 7, 21102, 41, 1, 0, 1008, 1018, 43, 63, 1005, 63, 563, 1105, 1, 569, 4, 549, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -7, 1205, 10, 587, 4, 575, 1001, 64, 1, 64, 1106, 0, 587, 1002, 64, 2, 64, 109, -11, 1202, 5, 1, 63, 1008, 63, 30, 63, 1005, 63, 609, 4, 593, 1106, 0, 613, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 4, 1201, 5, 0, 63, 1008, 63, 34, 63, 1005, 63, 637, 1001, 64, 1, 64, 1105, 1, 639, 4, 619, 1002, 64, 2, 64, 109, 12, 1206, 5, 651, 1105, 1, 657, 4, 645, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 9, 21101, 42, 0, -7, 1008, 1018, 39, 63, 1005, 63, 677, 1105, 1, 683, 4, 663, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -2, 21101, 43, 0, -8, 1008, 1015, 43, 63, 1005, 63, 705, 4, 689, 1106, 0, 709, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -25, 2107, 38, 10, 63, 1005, 63, 727, 4, 715, 1106, 0, 731, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 7, 2102, 1, 2, 63, 1008, 63, 24, 63, 1005, 63, 757, 4, 737, 1001, 64, 1, 64, 1105, 1, 757, 1002, 64, 2, 64, 109, -13, 1201, 10, 0, 63, 1008, 63, 29, 63, 1005, 63, 779, 4, 763, 1105, 1, 783, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 30, 21108, 44, 41, -3, 1005, 1019, 803, 1001, 64, 1, 64, 1106, 0, 805, 4, 789, 1002, 64, 2, 64, 109, -2, 21102, 45, 1, -7, 1008, 1013, 45, 63, 1005, 63, 827, 4, 811, 1105, 1, 831, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -16, 21107, 46, 47, 7, 1005, 1011, 849, 4, 837, 1106, 0, 853, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 9, 21108, 47, 47, 0, 1005, 1013, 875, 4, 859, 1001, 64, 1, 64, 1106, 0, 875, 1002, 64, 2, 64, 109, -10, 2101, 0, 2, 63, 1008, 63, 30, 63, 1005, 63, 901, 4, 881, 1001, 64, 1, 64, 1105, 1, 901, 4, 64, 99, 21102, 1, 27, 1, 21102, 1, 915, 0, 1106, 0, 922, 21201, 1, 51805, 1, 204, 1, 99, 109, 3, 1207, -2, 3, 63, 1005, 63, 964, 21201, -2, -1, 1, 21101, 942, 0, 0, 1106, 0, 922, 22101, 0, 1, -1, 21201, -2, -3, 1, 21101, 0, 957, 0, 1105, 1, 922, 22201, 1, -1, -2, 1105, 1, 968, 21201, -2, 0, -2, 109, -3, 2105, 1, 0},
			2,
			73110,
		},
	}

	for i, tc := range testCases {

		t.Run(strconv.Itoa(i), func(t *testing.T) {
			inStream := testInputStream([]int{tc.input})
			pass := false
			oStream := func(a ...interface{}) (n int, err error) {
				pass = assert.Equal(t, tc.expOut, a[0])
				return 0, nil
			}

			p := NewProccess(inStream, oStream)
			p.ProcessProgram(0, tc.program)
			assert.True(t, pass)
		})
	}
}

func testInputStream(inputs []int) func() int {
	in := make(chan int, len(inputs))
	for _, i := range inputs {
		in <- i
	}
	return func() int {
		return <-in
	}
}
