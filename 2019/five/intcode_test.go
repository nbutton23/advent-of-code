package five

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_BreakUpOpCode(t *testing.T) {
	testCases := []struct {
		ints       int
		op         int
		p1, p2, p3 bool
	}{
		{
			23,
			23,
			false,
			false,
			false,
		},
		{
			1002,
			2,
			false,
			true,
			false,
		},
		{
			102,
			2,
			true,
			false,
			false,
		},
		{
			10002,
			2,
			false,
			false,
			true,
		},
		{
			11102,
			2,
			true,
			true,
			true,
		},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			c := BreakUpOpCode(tc.ints)
			assert.Equal(t, tc.op, c.Code)
			assert.Equal(t, tc.p1, c.P1Immediate)
			assert.Equal(t, tc.p2, c.P2Immediate)
			assert.Equal(t, tc.p3, c.P3Immediate)
		})
	}
}

func Test_ProccessInstruction(t *testing.T) {
	p := []int{1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50}

	err := ProcessProgram(0, p)

	assert.NoError(t, err)

	assert.Equal(t, p[0], 3500)
}

func Test_testProgram(t *testing.T) {
	p := []int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 67, 166, 224, 1001, 224, -110, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 2, 62, 66, 224, 101, -406, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1101, 76, 51, 225, 1101, 51, 29, 225, 1102, 57, 14, 225, 1102, 64, 48, 224, 1001, 224, -3072, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1001, 217, 90, 224, 1001, 224, -101, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1101, 57, 55, 224, 1001, 224, -112, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 7, 224, 1, 223, 224, 223, 1102, 5, 62, 225, 1102, 49, 68, 225, 102, 40, 140, 224, 101, -2720, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1101, 92, 43, 225, 1101, 93, 21, 225, 1002, 170, 31, 224, 101, -651, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1, 136, 57, 224, 1001, 224, -138, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 223, 224, 223, 1102, 11, 85, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 449, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 554, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1008, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 629, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 644, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226}

	err := ProcessProgram(0, p)

	assert.NoError(t, err)

	assert.Equal(t, p[0], "a")
}

func Test_ProcessGravityAssist(t *testing.T) {
	o := ProcessGravityAssist(12, 2)

	assert.Equal(t, 3765464, o)
}

func Test_JumpTest(t *testing.T) {
	p := []int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9}
	err := ProcessProgram(0, p)

	assert.NoError(t, err)

	p = []int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1}

	err = ProcessProgram(0, p)

	assert.NoError(t, err)

	assert.Equal(t, p[0], "a")
}

func Test_LargeJumpTest(t *testing.T) {
	p := []int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}

	err := ProcessProgram(0, p)

	assert.NoError(t, err)

	assert.Equal(t, p[0], "a")
}
func Test_FindNounAndVerbForOutput(t *testing.T) {
	testCases := []struct {
		output       int
		min          int
		max          int
		expectedNoun int
		expectedVerb int
	}{
		{3765464, 0, 99, 12, 2},
		{19690720, 0, 99, 76, 10},
	}

	for _, tc := range testCases {
		t.Run("", func(t *testing.T) {
			n, v := FindNounAndVerbForOutput(tc.output, tc.min, tc.max)
			assert.Equal(t, tc.expectedNoun, n)
			assert.Equal(t, tc.expectedVerb, v)
		})
	}
}
